name: CI

on:
  pull_request:
  push:
    branches: [main]

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version

      - name: Cache Ruby gems
        id: cache-ruby
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ruby-${{ runner.os }}-${{ hashFiles('**/Gemfile.lock') }}

      - name: Install Ruby gems
        run: |
          bundle config set --local path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache Node modules
        id: cache-node
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install Node.js dependencies
        run: npm ci

  linters:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Setup workspace
        uses: actions/checkout@v4

      - name: Restore Ruby gems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ruby-${{ runner.os }}-${{ hashFiles('**/Gemfile.lock') }}

      - name: Restore Node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Run All Linters
        run: |
          set -e
          bin/rubocop
          bin/erblint --lint-all
          bin/haml-lint
          npx eslint . --max-warnings=0
          npx stylelint "**/*.{css,scss}" --max-warnings=0"

  scan:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scanner: [brakeman, importmap]
    steps:
      - name: Setup workspace
        uses: actions/checkout@v4

      - name: Restore Ruby gems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ruby-${{ runner.os }}-${{ hashFiles('**/Gemfile.lock') }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version

      - name: Run Scanners
        run: |
          case ${{ matrix.scanner }} in
            brakeman) bin/brakeman --no-pager ;;
            importmap) bin/importmap audit ;;
          esac

  security_audit:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Setup workspace
        uses: actions/checkout@v4

      - name: Restore Ruby gems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ruby-${{ runner.os }}-${{ hashFiles('**/Gemfile.lock') }}

      - name: Restore Node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Run bundle audit
        run: bundle exec bundle-audit check --update

      - name: Run npm audit
        run: npm audit --omit=dev --audit-level=high || true

  code_quality:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Setup workspace
        uses: actions/checkout@v4

      - name: Restore Ruby gems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ruby-${{ runner.os }}-${{ hashFiles('**/Gemfile.lock') }}

      - name: Restore Node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Run Reek
        run: bundle exec reek

      - name: Run RubyCritic
        run: bundle exec rubycritic --no-browser --minimum-score 80

  line_endings:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for CRLF line endings
        run: |
          if git grep -Il $'\r' . | grep .; then
            echo "::error::Found CRLF line endings! Please convert files to LF."
            exit 1
          fi

  test:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Install packages
        run: |
          sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libyaml-dev pkg-config google-chrome-stable

      - name: Setup workspace
        uses: actions/checkout@v4

      - name: Restore Ruby gems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ruby-${{ runner.os }}-${{ hashFiles('**/Gemfile.lock') }}

      - name: Restore Node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Run tests
        env:
          RAILS_ENV: test
        run: bin/rails db:test:prepare test test:system

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore
